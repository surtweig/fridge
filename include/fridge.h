#ifndef FRIDGE_H
#define FRIDGE_H

typedef unsigned char FRIDGE_WORD;
typedef unsigned short FRIDGE_DWORD;
typedef unsigned short FRIDGE_RAM_ADDR;
typedef unsigned short FRIDGE_ROM_ADDR;
typedef unsigned int FRIDGE_SIZE_T;

#define FRIDGE_ASCENDING_STACK
#define FRIDGE_POSIT16_SUPPORT

#define FRIDGE_RAM_SIZE 0x10000 // bytes
#define FRIDGE_MAX_DWORD 0xffff
#define FRIDGE_ROM_MAX_SEGMENTS 0x10000
#define FRIDGE_ROM_SEGMENT_SIZE 0x100 // bytes (16Mb maximum)
#define FRIDGE_WORD_BITS 8 // number of bits in a word
#define FRIDGE_MAX_IO_DEVICES 4
#define FRIDGE_MAX_INSTRUCTIONS 0x100
#define FRIDGE_GPU_BUS_SIZE 4
#define FRIDGE_GPU_FRAME_EGA_WIDTH 240
#define FRIDGE_GPU_FRAME_EGA_HEIGHT 160
#define FRIDGE_GPU_SPRITE_MEMORY_SIZE 0x10000 // bytes
#define FRIDGE_GPU_MAX_SPRITES 64
#define FRIDGE_GPU_MAX_SPRITES_PER_PIXEL 4
#define FRIDGE_GPU_PALETTE_SIZE 48 // 3*16
#define FRIDGE_GPU_FRAME_BUFFER_SIZE 19200 // FRIDGE_GPU_FRAME_EGA_WIDTH*FRIDGE_GPU_FRAME_EGA_HEIGHT >> 1; // 240x160x4 bits
#define FRIDGE_GPU_TEXT_GLYPH_WIDTH 6
#define FRIDGE_GPU_TEXT_GLYPH_HEIGHT 8
#define FRIDGE_GPU_TEXT_FRAME_WIDTH 40 // = FRIDGE_GPU_FRAME_EGA_WIDTH/FRIDGE_GPU_TEXT_GLYPH_WIDTH;
#define FRIDGE_GPU_TEXT_FRAME_HEIGHT 20 // = FRIDGE_GPU_FRAME_EGA_HEIGHT/FRIDGE_GPU_TEXT_GLYPH_HEIGHT;
#define FRIDGE_BOOT_SECTION_INDEX_ADDRESS 0x0003
#define FRIDGE_EXECUTABLE_OFFSET 0x0200
#define FRIDGE_IRQ_SYS_TIMER 0x0004
#define FRIDGE_IRQ_KEYBOARD_PRESS 0x0007
#define FRIDGE_IRQ_KEYBOARD_RELEASE 0x000a
#define FRIDGE_KEYBOARD_BUFFER_SIZE 32
#define FRIDGE_KEYBOARD_KEY_STATE_MASK 0x80
#define FRIDGE_KEYBOARD_KEY_CODE_MASK 0x7f

#define FRIDGE_DWORD_HL(H, L) (((FRIDGE_DWORD)H) << FRIDGE_WORD_BITS) | L // big endian
#define FRIDGE_HIGH_WORD(DW) (FRIDGE_WORD)(DW >> FRIDGE_WORD_BITS)
#define FRIDGE_LOW_WORD(DW) (FRIDGE_WORD)DW
#define FRIDGE_DWORD_TO_WORDS(DW) FRIDGE_HIGH_WORD(DW), FRIDGE_LOW_WORD(DW)
#define FRIDGE_HIGHBIT_MASK 0x80
#define FRIDGE_LOWBIT_MASK 0x01

#define FRIDGE_GPU_WORD(LP, RP) (FRIDGE_WORD)( ((LP & 0x0f) << 4) | (RP & 0x0f) )
#define FRIDGE_GPU_LEFT_PIXEL(W) (FRIDGE_WORD)( (W & 0xf0) >> 4 )
#define FRIDGE_GPU_RIGHT_PIXEL(W) (FRIDGE_WORD)(W & 0x0f)

#define FRIDGE_FLAG_SIGN_MASK   0x80
#define FRIDGE_FLAG_ZERO_MASK   0x40
#define FRIDGE_FLAG_PANIC_MASK  0x20
#define FRIDGE_FLAG_AUX_MASK    0x10
#define FRIDGE_FLAG_PARITY_MASK 0x04
#define FRIDGE_FLAG_CARRY_MASK  0x01

#define FRIDGE_DEV_ROM_RESET_ID 0x01
#define FRIDGE_DEV_ROM_ID 0x02
#define FRIDGE_DEV_KEYBOARD_ID 0x03

#ifdef FRIDGE_POSIT16_SUPPORT
    #define FRIDGE_PAM16_STACK_SIZE 8
#endif

typedef enum FRIDGE_IRCODE {

    NOP,

    MOV_AB, MOV_AC, MOV_AD, MOV_AE, MOV_AH, MOV_AL, MOV_AM, // MOV <Destination>, <Source> copies data from source to destination
    MOV_BA, MOV_BC, MOV_BD, MOV_BE, MOV_BH, MOV_BL, MOV_BM, // where:
    MOV_CA, MOV_CB, MOV_CD, MOV_CE, MOV_CH, MOV_CL, MOV_CM, // <Destination> is register (except F)
    MOV_DA, MOV_DB, MOV_DC, MOV_DE, MOV_DH, MOV_DL, MOV_DM, // <Source> is another register (except F), or memory[HL]
    MOV_EA, MOV_EB, MOV_EC, MOV_ED, MOV_EH, MOV_EL, MOV_EM, // or:
    MOV_HA, MOV_HB, MOV_HC, MOV_HD, MOV_HE, MOV_HL, MOV_HM, // <Destination> is register (except F), or memory[HL]
    MOV_LA, MOV_LB, MOV_LC, MOV_LD, MOV_LE, MOV_LH, MOV_LM, // <Source> is another register (except F)
    MOV_MA, MOV_MB, MOV_MC, MOV_MD, MOV_ME, MOV_MH, MOV_ML,

    MVI_A, MVI_B, MVI_C, MVI_D, MVI_E, MVI_H, MVI_L, MVI_M, // MVI <Destination>, W writes W to a register or memory[HL]

    LXI_BC, LXI_DE, LXI_HL, LXI_SP,                         // LXI <Destination>, DW writes DW to a register pair

    LDA,                                                    // LDA DW loads memory[DW] to A
    STA,                                                    // STA DW stores A in memory[DW]
    LHLD,                                                   // LHLD DW loads memory[DW, DW+1] to HL
    SHLD,                                                   // SHLD DW stores HL in memory[DW, DW+1]

    LDAX_BC, LDAX_DE, LDAX_HL,                              // LDAX <Src> loads memory[<Src>] to A
    STAX_BC, STAX_DE, STAX_HL,                              // STAX <Dest> stores A in memory[<Dest>]

    XCNG,                                                   // Swaps HL and DE

    ADD_A, ADD_B, ADD_C, ADD_D, ADD_E, ADD_H, ADD_L, ADD_M,
    ADI,
    ADC_A, ADC_B, ADC_C, ADC_D, ADC_E, ADC_H, ADC_L, ADC_M,
    ACI,

    SUB_A, SUB_B, SUB_C, SUB_D, SUB_E, SUB_H, SUB_L, SUB_M,
    SUI,
    SBB_A, SBB_B, SBB_C, SBB_D, SBB_E, SBB_H, SBB_L, SBB_M,
    SBI,

    INR_A, INR_B, INR_C, INR_D, INR_E, INR_H, INR_L, INR_M,
    DCR_A, DCR_B, DCR_C, DCR_D, DCR_E, DCR_H, DCR_L, DCR_M,

    INX_BC, INX_DE, INX_HL, INX_SP,
    DCX_BC, DCX_DE, DCX_HL, DCX_SP,

    DAD_BC, DAD_DE, DAD_HL, DAD_SP,
    DAI,

    ANA_A, ANA_B, ANA_C, ANA_D, ANA_E, ANA_H, ANA_L, ANA_M,
    ANI,
    ORA_A, ORA_B, ORA_C, ORA_D, ORA_E, ORA_H, ORA_L, ORA_M,
    ORI,
    XRA_A, XRA_B, XRA_C, XRA_D, XRA_E, XRA_H, XRA_L, XRA_M,
    XRI,
    CMP_A, CMP_B, CMP_C, CMP_D, CMP_E, CMP_H, CMP_L, CMP_M,
    CPI,

    RLC,
    RRC,
    RAL,
    RAR,
    CMA,
    CMC,
    STC,
    RTC,

    JMP, JNZ, JZ, JNC, JC, JPO, JPE, JP, JM,
    CALL, CNZ, CZ, CNC, CC, CPO, CPE, CP, CM,
    RET, RNZ, RZ, RNC, RC, RPO, RPE, RP, RM,

    PCHL,

    PUSH_AF, PUSH_BC, PUSH_DE, PUSH_HL,
    POP_AF, POP_BC, POP_DE, POP_HL,

    XTHL, SPHL, HLSP,

    IIN, IOUT, HLT, EI, DI, // 233 instructions

    // video controller instructions
    VPRE,  // swaps back and visible buffers and sets buffer offset (position HL)
    VMODE, // switches video mode (A = 0 for EGA and 1 for TEXT)
    VPAL,  // updates EGA pallette color (color A, rgb B, C, D)

    // back buffer instructions
    VFSA,  // store A as byte on the back buffer at address HL
    VFSI,  // store two bytes (arg0, arg1) on the back buffer at address HL,
           // then increase HL by 2
    VFSAC, // store A as color on the back buffer at position HL
    VFLA,  // load to A a byte on the back buffer at address HL
    VFLAC, // load to A a color on the back buffer at position HL
    VS2F,  // (address BC, address HL)
           // copies one byte (two pixels) from sprite memory at address HL
           // to backbuffer at address BC

    // sprite memory instructions
    VSSA,  // store A as byte in sprite memory at address HL
    VSSI,  // store two bytes (arg0, arg1) in sprite memory at address HL,
           // then increase HL by 2
    VSLA,  // load to A a byte in sprite memory at address HL


    // sprites
    VSS, // set sprite (index A, width B, height C, address HL)
    VSD, // draw sprite (index A, mode B, position HL)
         // mode:
         // 0 - invisible
         // 1 - opaque
         // 2 - transparent0
         // 3 - additive
         // 4 - subtractive
         // 5 - bitwise and
         // 6 - bitwise or
         // 7 - bitwise xor

#ifdef FRIDGE_POSIT16_SUPPORT
    PAM16C,  // executes PAM16 command
             // command code is 4 low bits of A (A & 0x0f)
#else
    IR247,
#endif
    IR248,
    IR249,
    IR250,
    IR251,
    IR252,
    IR253,
    IR254,
    IR255

} FRIDGE_IRCODE;

const FRIDGE_WORD FRIDGE_gpu_default_palette[FRIDGE_GPU_PALETTE_SIZE] =
{
    0x00, 0x00, 0x00, // black
    0x00, 0x00, 0x80, // blue
    0x00, 0x80, 0x00, // green
    0x00, 0x80, 0x80, // cyan
    0x80, 0x00, 0x00, // red
    0x80, 0x00, 0x80, // magenta
    0x80, 0x40, 0x00, // brown
    0x80, 0x80, 0x80, // light gray
    0x40, 0x40, 0x40, // dark gray
    0x00, 0x40, 0xff, // bright blue
    0x40, 0xff, 0x40, // bright green
    0x40, 0xff, 0xff, // bright cyan
    0xff, 0x40, 0x40, // bright red
    0xff, 0x40, 0xff, // bright magenta
    0xff, 0xff, 0x40, // bright yellow
    0xff, 0xff, 0xff, // white
};

#ifdef FRIDGE_POSIT16_SUPPORT
typedef enum FRIDGE_PAM16_COMMAND
{
    PAM16_NOP,
    PAM16_RESET,  // resets PAM16, sets ES = (A >> 4) if (A >> 4) > 0
    PAM16_PUSH,   // stack push from HL
    PAM16_POP,    // stack pop to HL
    PAM16_ADD,    // add top two
    PAM16_SUB,    // subtract top two
    PAM16_MUL,    // multiply top two
    PAM16_DIV,    // divide top two
    PAM16_FMADD,  // fused multiply-add S[sp-1] + S[sp-2] * S[sp-3]
    PAM16_PACK,   // packs a posit number from sign (B), regime (C), exponent (DE), fraction (HL)
    PAM16_UNPACK, // unpacks a posit number to sign (B), regime (C), exponent (DE), fraction (HL)
} FRIDGE_PAM16_COMMAND;
#endif

// Each word contains 8 vertical pixels
const FRIDGE_WORD FRIDGE_gpu_default_glyph_bitmap[FRIDGE_GPU_TEXT_GLYPH_WIDTH*256] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #0 ''
    0x7c, 0xa2, 0x8a, 0xa2, 0x7c, 0x00, // #1 ''
    0x7c, 0xd6, 0xf2, 0xd6, 0x7c, 0x00, // #2 ''
    0x38, 0x7c, 0x3e, 0x7c, 0x38, 0x00, // #3 ''
    0x10, 0x38, 0x7c, 0x38, 0x10, 0x00, // #4 ''
    0x18, 0x5a, 0xfe, 0x5a, 0x18, 0x00, // #5 ''
    0x18, 0x3a, 0x7e, 0x3a, 0x18, 0x00, // #6 ''
    0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, // #7 ''
    0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, // #8 ''
    0x00, 0x18, 0x24, 0x24, 0x18, 0x00, // #9 ''
    0xff, 0xe7, 0xdb, 0xdb, 0xe7, 0xff, // #10 ''
    0x06, 0x09, 0x09, 0x56, 0x60, 0x70, // #11 ''
    0x64, 0x94, 0x9f, 0x94, 0x64, 0x00, // #12 ''
    0x00, 0x03, 0x03, 0x7c, 0x40, 0x30, // #13 ''
    0x03, 0x1f, 0x20, 0x20, 0x43, 0x7f, // #14 ''
    0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, // #15 ''

    0x7c, 0x38, 0x38, 0x10, 0x10, 0x00, // #16 ''
    0x10, 0x10, 0x38, 0x38, 0x7c, 0x00, // #17 ''
    0x24, 0x66, 0xff, 0x66, 0x24, 0x00, // #18 ''
    0x00, 0xfa, 0x00, 0x00, 0xfa, 0x00, // #19 ''
    0x60, 0x90, 0xfe, 0x80, 0xfe, 0x00, // #20 ''
    0x5a, 0xfd, 0xa5, 0xbf, 0x9a, 0x00, // #21 ''
    0x00, 0x06, 0x06, 0x06, 0x06, 0x00, // #22 ''
    0x29, 0x6d, 0xff, 0xff, 0x6d, 0x29, // #23 ''
    0x20, 0x60, 0xfe, 0x60, 0x20, 0x00, // #24 ''
    0x08, 0x0c, 0xfe, 0x0c, 0x08, 0x00, // #25 ''
    0x10, 0x10, 0x7c, 0x38, 0x10, 0x00, // #26 ''
    0x10, 0x38, 0x7c, 0x10, 0x10, 0x10, // #27 ''
    0x7e, 0x46, 0x56, 0x46, 0x7e, 0x00, // #28 ''
    0x10, 0x38, 0x10, 0x10, 0x38, 0x10, // #29 ''
    0x04, 0x1c, 0x7c, 0x1c, 0x04, 0x00, // #30 ''
    0x40, 0x70, 0x7c, 0x70, 0x40, 0x00, // #31 ''

    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #32 ' '
    0x00, 0x00, 0xfa, 0x00, 0x00, 0x00, // #33 '!'
    0x00, 0x20, 0xc0, 0x20, 0xc0, 0x00, // #34 '"'
    0x28, 0xfe, 0x28, 0xfe, 0x28, 0x00, // #35 '#'
    0x24, 0x54, 0xd6, 0x54, 0x48, 0x00, // #36 '$'
    0xc2, 0x0c, 0x10, 0x60, 0x86, 0x00, // #37 '%'
    0x0c, 0x52, 0xba, 0x4c, 0x12, 0x00, // #38 '&'
    0x00, 0x00, 0x20, 0xc0, 0x00, 0x00, // #39 '''
    0x00, 0x38, 0x44, 0x82, 0x82, 0x00, // #40 '('
    0x00, 0x82, 0x82, 0x44, 0x38, 0x00, // #41 ')'
    0x00, 0x28, 0x10, 0x10, 0x28, 0x00, // #42 '*'
    0x10, 0x10, 0x7c, 0x10, 0x10, 0x00, // #43 '+'
    0x00, 0x01, 0x02, 0x00, 0x00, 0x00, // #44 ','
    0x10, 0x10, 0x10, 0x10, 0x10, 0x00, // #45 '-'
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // #46 '.'
    0x00, 0x02, 0x0c, 0x30, 0x40, 0x00, // #47 '/'

    0x7c, 0x8a, 0x92, 0xa2, 0x7c, 0x00, // #48 '0'
    0x02, 0x42, 0xfe, 0x02, 0x02, 0x00, // #49 '1'
    0x46, 0x8a, 0x92, 0x92, 0x66, 0x00, // #50 '2'
    0x44, 0x82, 0x92, 0x92, 0x6c, 0x00, // #51 '3'
    0x18, 0x28, 0x48, 0x88, 0xfe, 0x00, // #52 '4'
    0xe4, 0xa2, 0xa2, 0xa2, 0x9c, 0x00, // #53 '5'
    0x3c, 0x52, 0x92, 0x92, 0x0c, 0x00, // #54 '6'
    0xc0, 0x80, 0x8e, 0x90, 0xe0, 0x00, // #55 '7'
    0x6c, 0x92, 0x92, 0x92, 0x6c, 0x00, // #56 '8'
    0x60, 0x92, 0x92, 0x94, 0x78, 0x00, // #57 '9'
    0x00, 0x00, 0x24, 0x00, 0x00, 0x00, // #58 ':'
    0x00, 0x02, 0x24, 0x00, 0x00, 0x00, // #59 ';'
    0x10, 0x28, 0x44, 0x82, 0x00, 0x00, // #60 '<'
    0x24, 0x24, 0x24, 0x24, 0x24, 0x00, // #61 '='
    0x82, 0x44, 0x28, 0x10, 0x00, 0x00, // #62 '>'
    0x40, 0x80, 0x8a, 0x90, 0x60, 0x00, // #63 '?'

    0x7c, 0x82, 0xba, 0xba, 0x8a, 0x78, // #64 '@'
    0x7e, 0xa0, 0xa0, 0xa0, 0x7e, 0x00, // #65 'A'
    0xfe, 0xa2, 0xa2, 0xa2, 0x5c, 0x00, // #66 'B'
    0x7c, 0x82, 0x82, 0x82, 0x44, 0x00, // #67 'C'
    0xfe, 0x82, 0x82, 0x82, 0x7c, 0x00, // #68 'D'
    0xfe, 0xa2, 0xa2, 0x82, 0x82, 0x00, // #69 'E'
    0xfe, 0xa0, 0xa0, 0x80, 0x80, 0x00, // #70 'F'
    0x7c, 0x82, 0x82, 0xa2, 0xbc, 0x00, // #71 'G'
    0xfe, 0x20, 0x20, 0x20, 0xfe, 0x00, // #72 'H'
    0x00, 0x82, 0xfe, 0x82, 0x00, 0x00, // #73 'I'
    0x04, 0x02, 0x02, 0x02, 0xfc, 0x00, // #74 'J'
    0xfe, 0x20, 0x20, 0x50, 0x8e, 0x00, // #75 'K'
    0xfe, 0x02, 0x02, 0x02, 0x02, 0x00, // #76 'L'
    0xfe, 0x40, 0x20, 0x40, 0xfe, 0x00, // #77 'M'
    0xfe, 0x40, 0x20, 0x10, 0xfe, 0x00, // #78 'N'
    0x7c, 0x82, 0x82, 0x82, 0x7c, 0x00, // #79 'O'

    0xfe, 0xa0, 0xa0, 0xa0, 0x40, 0x00, // #80 'P'
    0x7c, 0x82, 0x82, 0x84, 0x7a, 0x00, // #81 'Q'
    0xfe, 0xa0, 0xa0, 0xa0, 0x5e, 0x00, // #82 'R'
    0x44, 0xa2, 0xa2, 0xa2, 0x9c, 0x00, // #83 'S'
    0x80, 0x80, 0xfe, 0x80, 0x80, 0x00, // #84 'T'
    0xfc, 0x02, 0x02, 0x02, 0xfc, 0x00, // #85 'U'
    0xf0, 0x0c, 0x02, 0x0c, 0xf0, 0x00, // #86 'V'
    0xfe, 0x04, 0x08, 0x04, 0xfe, 0x00, // #87 'W'
    0x8e, 0x50, 0x20, 0x50, 0x8e, 0x00, // #88 'X'
    0x80, 0x40, 0x3e, 0x40, 0x80, 0x00, // #89 'Y'
    0x86, 0x8a, 0x92, 0xa2, 0xc2, 0x00, // #90 'Z'
    0x00, 0xfe, 0x82, 0x82, 0x00, 0x00, // #91 '['
    0x00, 0x40, 0x30, 0x0c, 0x02, 0x00, // #92 '\'
    0x00, 0x82, 0x82, 0xfe, 0x00, 0x00, // #93 ']'
    0x20, 0x40, 0x80, 0x40, 0x20, 0x00, // #94 '^'
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, // #95 '_'

    0x00, 0x00, 0xc0, 0x20, 0x00, 0x00, // #96 '`'
    0x04, 0x2a, 0x2a, 0x2a, 0x1e, 0x00, // #97 'a'
    0xfe, 0x12, 0x22, 0x22, 0x1c, 0x00, // #98 'b'
    0x1c, 0x22, 0x22, 0x22, 0x14, 0x00, // #99 'c'
    0x1c, 0x22, 0x22, 0x12, 0xfe, 0x00, // #100 'd'
    0x1c, 0x2a, 0x2a, 0x2a, 0x1a, 0x00, // #101 'e'
    0x00, 0x20, 0x7e, 0xa0, 0xa0, 0x00, // #102 'f'
    0x19, 0x25, 0x25, 0x25, 0x3e, 0x00, // #103 'g'
    0xfe, 0x10, 0x20, 0x20, 0x1e, 0x00, // #104 'h'
    0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, // #105 'i'
    0x06, 0x01, 0x01, 0x01, 0xbe, 0x00, // #106 'j'
    0x00, 0xfe, 0x08, 0x14, 0x22, 0x00, // #107 'k'
    0x00, 0x00, 0xfc, 0x02, 0x00, 0x00, // #108 'l'
    0x3e, 0x20, 0x18, 0x20, 0x1e, 0x00, // #109 'm'
    0x3e, 0x20, 0x20, 0x20, 0x1e, 0x00, // #110 'n'
    0x1c, 0x22, 0x22, 0x22, 0x1c, 0x00, // #111 'o'

    0x3f, 0x14, 0x24, 0x24, 0x18, 0x00, // #112 'p'
    0x18, 0x24, 0x24, 0x14, 0x3f, 0x00, // #113 'q'
    0x3e, 0x10, 0x20, 0x20, 0x10, 0x00, // #114 'r'
    0x12, 0x2a, 0x2a, 0x2a, 0x24, 0x00, // #115 's'
    0x00, 0x20, 0xfc, 0x22, 0x00, 0x00, // #116 't'
    0x3c, 0x02, 0x02, 0x02, 0x3e, 0x00, // #117 'u'
    0x38, 0x04, 0x02, 0x04, 0x38, 0x00, // #118 'v'
    0x3c, 0x02, 0x0e, 0x02, 0x3e, 0x00, // #119 'w'
    0x22, 0x14, 0x08, 0x14, 0x22, 0x00, // #120 'x'
    0x39, 0x05, 0x05, 0x05, 0x3e, 0x00, // #121 'y'
    0x22, 0x26, 0x2a, 0x32, 0x22, 0x00, // #122 'z'
    0x00, 0x10, 0x6c, 0x82, 0x82, 0x00, // #123 '{'
    0x00, 0x00, 0xee, 0x00, 0x00, 0x00, // #124 '|'
    0x00, 0x82, 0x82, 0x6c, 0x10, 0x00, // #125 '}'
    0x40, 0x80, 0xc0, 0x40, 0x80, 0x00, // #126 '~'
    0x0e, 0x12, 0x22, 0x12, 0x0e, 0x00, // #127 ''

    0x10, 0x3e, 0x68, 0x3e, 0x10, 0x00, // #128 ''
    0x30, 0x70, 0x7e, 0x70, 0x30, 0x00, // #129 ''
    0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, // #130 ''
    0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, // #131 ''
    0x00, 0x3c, 0x24, 0x24, 0x3c, 0x00, // #132 ''
    0xff, 0xc3, 0xdb, 0xdb, 0xc3, 0xff, // #133 ''
    0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, // #134 ''
    0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, // #135 ''
    0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, // #136 ''
    0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, // #137 ''
    0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, // #138 ''
    0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, // #139 ''
    0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, // #140 ''
    0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x07, // #141 ''
    0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfc, // #142 ''
    0xfc, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, // #143 ''

    0x7c, 0x44, 0x44, 0x44, 0x7c, 0x00, // #144 ''
    0x7c, 0x44, 0x54, 0x44, 0x7c, 0x00, // #145 ''
    0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, // #146 ''
    0xfe, 0xbe, 0xaa, 0x9e, 0xfe, 0x00, // #147 ''
    0xfe, 0xfe, 0x8a, 0xfe, 0xfe, 0x00, // #148 ''
    0x00, 0x60, 0x40, 0x02, 0x06, 0x00, // #149 ''
    0x00, 0x70, 0x00, 0x00, 0x0e, 0x00, // #150 ''
    0x00, 0x38, 0x00, 0x00, 0x1c, 0x00, // #151 ''
    0x00, 0x1c, 0x00, 0x00, 0x38, 0x00, // #152 ''
    0x00, 0x0e, 0x00, 0x00, 0x70, 0x00, // #153 ''
    0x00, 0x06, 0x02, 0x40, 0x60, 0x00, // #154 ''
    0x00, 0x02, 0x42, 0x42, 0x40, 0x00, // #155 ''
    0x00, 0x40, 0x42, 0x42, 0x02, 0x00, // #156 ''
    0x00, 0x2a, 0x2a, 0x2a, 0x2a, 0x00, // #157 ''
    0x00, 0x28, 0x10, 0x28, 0x00, 0x00, // #158 ''
    0x02, 0x11, 0x7e, 0x90, 0x40, 0x00, // #159 ''

    0x7e, 0x5e, 0x42, 0x5e, 0x7e, 0x00, // #160 ''
    0x7e, 0x6e, 0x42, 0x6e, 0x7e, 0x00, // #161 ''
    0x7e, 0x76, 0x42, 0x76, 0x7e, 0x00, // #162 ''
    0x7e, 0x7a, 0x42, 0x7a, 0x7e, 0x00, // #163 ''
    0x22, 0x44, 0x88, 0x44, 0x22, 0x00, // #164 ''
    0x88, 0x44, 0x22, 0x44, 0x88, 0x00, // #165 ''
    0x44, 0x28, 0x92, 0x44, 0x28, 0x92, // #166 ''
    0x92, 0x28, 0x44, 0x92, 0x28, 0x44, // #167 ''
    0x0c, 0x12, 0xa2, 0x02, 0x04, 0x00, // #168 ''
    0x00, 0x1c, 0x10, 0x10, 0x10, 0x10, // #169 ''
    0x10, 0x10, 0x10, 0x10, 0x1c, 0x00, // #170 ''
    0xe8, 0x10, 0x20, 0x53, 0x95, 0x09, // #171 ''
    0xe8, 0x10, 0x24, 0x4c, 0x94, 0x3f, // #172 ''
    0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, // #173 ''
    0x10, 0x28, 0x54, 0x28, 0x44, 0x00, // #174 ''
    0x44, 0x28, 0x54, 0x28, 0x10, 0x00, // #175 ''

    0xaa, 0x00, 0x55, 0x00, 0xaa, 0x00, // #176 ''
    0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, // #177 ''
    0xff, 0x55, 0xff, 0xaa, 0xff, 0x55, // #178 ''
    0x00, 0x00, 0xff, 0x00, 0x00, 0x00, // #179 ''
    0x10, 0x10, 0xff, 0x00, 0x00, 0x00, // #180 ''
    0x28, 0x28, 0xff, 0x00, 0x00, 0x00, // #181 ''
    0x10, 0xff, 0x00, 0xff, 0x00, 0x00, // #182 ''
    0x10, 0x1f, 0x10, 0x1f, 0x00, 0x00, // #183 ''
    0x28, 0x28, 0x3f, 0x00, 0x00, 0x00, // #184 ''
    0x28, 0xef, 0x00, 0xff, 0x00, 0x00, // #185 ''
    0x00, 0xff, 0x00, 0xff, 0x00, 0x00, // #186 ''
    0x28, 0x2f, 0x20, 0x3f, 0x00, 0x00, // #187 ''
    0x28, 0xe8, 0x08, 0xf8, 0x00, 0x00, // #188 ''
    0x08, 0xf8, 0x08, 0xf8, 0x00, 0x00, // #189 ''
    0x28, 0x28, 0xf8, 0x00, 0x00, 0x00, // #190 ''
    0x10, 0x10, 0x1f, 0x00, 0x00, 0x00, // #191 ''

    0x00, 0x00, 0xf0, 0x10, 0x10, 0x10, // #192 ''
    0x10, 0x10, 0xf0, 0x10, 0x10, 0x10, // #193 ''
    0x10, 0x10, 0x1f, 0x10, 0x10, 0x10, // #194 ''
    0x00, 0x00, 0xff, 0x10, 0x10, 0x10, // #195 ''
    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, // #196 ''
    0x10, 0x10, 0xff, 0x10, 0x10, 0x10, // #197 ''
    0x00, 0x00, 0xff, 0x28, 0x28, 0x28, // #198 ''
    0x00, 0xff, 0x00, 0xff, 0x08, 0x08, // #199 ''
    0x00, 0xf8, 0x08, 0xe8, 0x28, 0x28, // #200 ''
    0x00, 0x3f, 0x20, 0x2f, 0x28, 0x28, // #201 ''
    0x28, 0xe8, 0x08, 0xe8, 0x28, 0x28, // #202 ''
    0x28, 0x2f, 0x20, 0x2f, 0x28, 0x28, // #203 ''
    0x00, 0xff, 0x00, 0xef, 0x28, 0x28, // #204 ''
    0x28, 0x28, 0x28, 0x28, 0x28, 0x28, // #205 ''
    0x28, 0xef, 0x00, 0xef, 0x28, 0x28, // #206 ''
    0x28, 0x28, 0xe8, 0x28, 0x28, 0x28, // #207 ''

    0x10, 0xf0, 0x10, 0xf0, 0x10, 0x10, // #208 ''
    0x28, 0x28, 0x2f, 0x28, 0x28, 0x28, // #209 ''
    0x10, 0x1f, 0x10, 0x1f, 0x10, 0x10, // #210 ''
    0x00, 0xf0, 0x10, 0xf0, 0x10, 0x10, // #211 ''
    0x00, 0x00, 0xf8, 0x28, 0x28, 0x28, // #212 ''
    0x00, 0x00, 0x3f, 0x28, 0x28, 0x28, // #213 ''
    0x00, 0x1f, 0x10, 0x1f, 0x10, 0x10, // #214 ''
    0x10, 0xff, 0x10, 0xff, 0x10, 0x10, // #215 ''
    0x28, 0x28, 0xff, 0x28, 0x28, 0x28, // #216 ''
    0x10, 0x10, 0xf0, 0x00, 0x00, 0x00, // #217 ''
    0x00, 0x00, 0x0f, 0x08, 0x08, 0x08, // #218 ''
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // #219 ''
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, // #220 ''
    0xff, 0xff, 0xff, 0x00, 0x00, 0x00, // #221 ''
    0x00, 0x00, 0x00, 0xff, 0xff, 0xff, // #222 ''
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, // #223 ''

    0xfe, 0x00, 0xfe, 0x00, 0xfe, 0x00, // #224 ''
    0x30, 0x7e, 0x00, 0x30, 0x7e, 0x00, // #225 ''
    0x3e, 0x2a, 0x7a, 0x2a, 0x3e, 0x00, // #226 ''
    0x3e, 0x3e, 0x7e, 0x3e, 0x3e, 0x00, // #227 ''
    0x10, 0x1e, 0x0c, 0x0c, 0x0e, 0x00, // #228 ''
    0x18, 0x1e, 0x1c, 0x1c, 0x1e, 0x00, // #229 ''
    0x60, 0x7e, 0x38, 0x38, 0x3e, 0x00, // #230 ''
    0x00, 0x10, 0x1c, 0x0e, 0x0c, 0x00, // #231 ''
    0x76, 0x70, 0x76, 0x70, 0x76, 0x00, // #232 ''
    0xfe, 0x92, 0xfe, 0x92, 0xfe, 0x00, // #233 ''
    0xfe, 0xe6, 0xce, 0xe6, 0xfe, 0x00, // #234 ''
    0xfe, 0xce, 0xe6, 0xce, 0xfe, 0x00, // #235 ''
    0xfe, 0xee, 0xc6, 0xd6, 0xfe, 0x00, // #236 ''
    0xfe, 0xd6, 0xc6, 0xee, 0xfe, 0x00, // #237 ''
    0x38, 0x7c, 0x7c, 0x7c, 0x38, 0x00, // #238 ''
    0x38, 0x44, 0x44, 0x44, 0x38, 0x00, // #239 ''

    0x54, 0x54, 0x54, 0x54, 0x54, 0x00, // #240 ''
    0x22, 0x22, 0xfa, 0x22, 0x22, 0x00, // #241 ''
    0x8a, 0xda, 0x72, 0x22, 0x02, 0x00, // #242 ''
    0x22, 0x72, 0xda, 0x8a, 0x02, 0x00, // #243 ''
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #244 ''
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // #245 ''
    0x10, 0x10, 0x54, 0x10, 0x10, 0x00, // #246 ''
    0x24, 0x48, 0x6c, 0x24, 0x48, 0x00, // #247 ''
    0x60, 0xf0, 0x90, 0xf0, 0x60, 0x00, // #248 ''
    0x00, 0x00, 0x18, 0x18, 0x00, 0x00, // #249 ''
    0x00, 0x00, 0x08, 0x08, 0x00, 0x00, // #250 ''
    0x08, 0x0c, 0x06, 0xfe, 0x80, 0x00, // #251 ''
    0xf8, 0xf8, 0x80, 0xf8, 0x78, 0x00, // #252 ''
    0x98, 0xb8, 0xe8, 0x48, 0x00, 0x00, // #253 ''
    0x7c, 0x7c, 0x00, 0x7c, 0x7c, 0x00, // #254 ''
    0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00  // #255 ''

};

#endif
